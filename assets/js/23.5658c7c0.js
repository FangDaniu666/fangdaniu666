(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{740:function(n,s,e){"use strict";e.r(s);var t=e(4),a=Object(t.a)({},(function(){var n=this,s=n.$createElement,e=n._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("div",{staticClass:"custom-block danger"},[e("p",{staticClass:"custom-block-title"},[n._v("说明")]),n._v(" "),e("p",[n._v("原型模式是一种创建型设计模式，它允许通过复制现有对象来创建新对象，而不是使用昂贵的实例化过程。该模式通常用于需要创建多个相似对象的情况，因为它可以提高性能并减少代码复杂性。")])]),n._v(" "),e("p",[n._v("在原型模式中，我们定义一个原型接口，该接口包含一个克隆方法，该方法用于复制原型对象并创建新的对象。实现该接口的具体类可以提供不同的克隆实现。")]),n._v(" "),e("p",[n._v("以下是一个简单的 Java 代码示例，展示了如何使用原型模式创建新的对象：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// 定义原型接口\ninterface Prototype {\n    public Prototype clone();\n}\n\n// 具体原型类\nclass ConcretePrototype implements Prototype {\n    private String name;\n\n    public ConcretePrototype(String name) {\n        this.name = name;\n    }\n\n    // 实现克隆方法\n    public Prototype clone() {\n        return new ConcretePrototype(name);\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\n// 客户端代码\npublic class Client {\n    public static void main(String[] args) {\n        // 创建原型对象\n        ConcretePrototype prototype = new ConcretePrototype("original");\n\n        // 克隆原型对象\n        ConcretePrototype clone = (ConcretePrototype) prototype.clone();\n\n        // 输出克隆对象的名称\n        System.out.println(clone.getName()); // 输出：original\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br")])]),e("p",[n._v("在上面的示例中，我们定义了一个原型接口 "),e("code",[n._v("Prototype")]),n._v("，并实现了一个具体原型类 "),e("code",[n._v("ConcretePrototype")]),n._v("。该类包含一个名称字段和一个克隆方法，该方法返回一个新的 "),e("code",[n._v("ConcretePrototype")]),n._v(" 对象，并将原始对象的名称复制到新对象中。")]),n._v(" "),e("p",[n._v("在客户端代码中，我们首先创建一个原型对象 "),e("code",[n._v("prototype")]),n._v("，然后通过调用 "),e("code",[n._v("clone")]),n._v(" 方法创建一个新的克隆对象 "),e("code",[n._v("clone")]),n._v("。最后，我们输出 "),e("code",[n._v("clone")]),n._v(" 对象的名称，以证明它已成功复制了原始对象的状态。")])])}),[],!1,null,null,null);s.default=a.exports}}]);