<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[房大牛的小站]]></title><description><![CDATA[欢迎来到我的小世界，我会用文字记录生活，分享思考]]></description><link>https://daniu.com</link><generator>RSS for Node</generator><lastBuildDate>Sun, 23 Apr 2023 02:47:14 GMT</lastBuildDate><atom:link href="https://daniu.com/rss.xml" rel="self" type="application/rss+xml"/><copyright><![CDATA[房大牛 2023]]></copyright><language><![CDATA[en]]></language><item><title><![CDATA[分享生活]]></title><description><![CDATA[<div class="custom-block tip"><p class="custom-block-title">说明</p>
<p>暂无</p>
</div>
]]></description><link>https://daniu.com/%E7%94%9F%E6%B4%BB%E5%88%86%E4%BA%AB/life.html</link><guid isPermaLink="true">https://daniu.com/%E7%94%9F%E6%B4%BB%E5%88%86%E4%BA%AB/life.html</guid><category><![CDATA[生活]]></category><dc:creator><![CDATA[房大牛]]></dc:creator><pubDate>Thu, 01 May 2200 12:44:15 GMT</pubDate></item><item><title><![CDATA[实用工具]]></title><link>https://daniu.com/tools/</link><guid isPermaLink="true">https://daniu.com/tools/</guid><dc:creator><![CDATA[房大牛]]></dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 GMT</pubDate></item><item><title><![CDATA[备忘录模式]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>备忘录模式是一种行为型设计模式，它允许在不破坏封装性的前提下，捕获并外部化一个对象的内部状态，以便以后可以将该对象恢复到先前的状态。</p>
</div>
]]></description><link>https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/22.Memento.html</link><guid isPermaLink="true">https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/22.Memento.html</guid><category><![CDATA[java]]></category><dc:creator><![CDATA[房大牛]]></dc:creator><pubDate>Fri, 21 Apr 2023 22:44:36 GMT</pubDate></item><item><title><![CDATA[观察者模式]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>观察者模式是一种行为设计模式，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象，当主题对象状态发生变化时，会通知所有观察者对象进行更新。</p>
</div>
]]></description><link>https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/21.Observer.html</link><guid isPermaLink="true">https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/21.Observer.html</guid><category><![CDATA[java]]></category><dc:creator><![CDATA[房大牛]]></dc:creator><pubDate>Fri, 21 Apr 2023 22:44:35 GMT</pubDate></item><item><title><![CDATA[模板模式]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>模板模式是一种行为设计模式，它定义了一个算法的骨架，将一些步骤的实现留给子类。</p>
</div>
]]></description><link>https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/20.TemplateMethod.html</link><guid isPermaLink="true">https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/20.TemplateMethod.html</guid><category><![CDATA[java]]></category><dc:creator><![CDATA[房大牛]]></dc:creator><pubDate>Fri, 21 Apr 2023 22:44:34 GMT</pubDate></item><item><title><![CDATA[策略模式]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>策略模式是一种行为型设计模式，它定义了一系列算法，并将每个算法封装起来，使它们可以互换使用。策略模式使得算法可以独立于使用它的客户端而变化。</p>
</div>
]]></description><link>https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19.Strategy.html</link><guid isPermaLink="true">https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19.Strategy.html</guid><category><![CDATA[java]]></category><dc:creator><![CDATA[房大牛]]></dc:creator><pubDate>Fri, 21 Apr 2023 22:44:33 GMT</pubDate></item><item><title><![CDATA[中介者模式]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>中介者模式是一种行为型设计模式，旨在通过提供一个中介者对象，来协调一组对象之间的交互，以减少对象之间的直接耦合。</p>
</div>
]]></description><link>https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/18.Mediator.html</link><guid isPermaLink="true">https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/18.Mediator.html</guid><category><![CDATA[java]]></category><dc:creator><![CDATA[房大牛]]></dc:creator><pubDate>Fri, 21 Apr 2023 22:44:32 GMT</pubDate></item><item><title><![CDATA[访问者模式]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>访问者模式是一种行为型设计模式，它允许你将算法与对象结构分离。通过这种方式，你可以在不改变对象结构的前提下向现有对象结构添加新的操作。</p>
</div>
]]></description><link>https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/17.Visitor.html</link><guid isPermaLink="true">https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/17.Visitor.html</guid><category><![CDATA[java]]></category><dc:creator><![CDATA[房大牛]]></dc:creator><pubDate>Fri, 21 Apr 2023 22:44:31 GMT</pubDate></item><item><title><![CDATA[迭代器模式]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>迭代器模式是一种设计模式，它提供了一种顺序访问集合中各个元素的方法，而不必暴露集合的内部结构。</p>
</div>
]]></description><link>https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/16.Iterator.html</link><guid isPermaLink="true">https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/16.Iterator.html</guid><category><![CDATA[java]]></category><dc:creator><![CDATA[房大牛]]></dc:creator><pubDate>Fri, 21 Apr 2023 22:44:30 GMT</pubDate></item><item><title><![CDATA[解释器模式]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>解释器模式是一种行为型设计模式，它定义了一种语言文法，并且定义了解释该语言中语句的解释器。它属于一种简单的语法解析器，通常用于对复杂的文本内容进行解析和处理。</p>
</div>
]]></description><link>https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/15.Interpreter.html</link><guid isPermaLink="true">https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/15.Interpreter.html</guid><category><![CDATA[java]]></category><dc:creator><![CDATA[房大牛]]></dc:creator><pubDate>Fri, 21 Apr 2023 22:44:29 GMT</pubDate></item><item><title><![CDATA[命令模式]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>命令模式是一种行为设计模式，它允许将请求封装为一个对象，从而使你可以将不同的请求参数化，对请求排队或记录请求日志，以及支持可撤销的操作。</p>
</div>
]]></description><link>https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/14.Command.html</link><guid isPermaLink="true">https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/14.Command.html</guid><category><![CDATA[java]]></category><dc:creator><![CDATA[房大牛]]></dc:creator><pubDate>Fri, 21 Apr 2023 22:44:28 GMT</pubDate></item><item><title><![CDATA[责任链模式]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>责任链模式是一种行为型设计模式，它允许将请求沿着一个链传递，直到有一个处理器能够处理该请求为止。每个处理器都可以选择将请求传递给下一个处理器或者自己处理请求。</p>
</div>
]]></description><link>https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/13.ResponsibilityChain.html</link><guid isPermaLink="true">https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/13.ResponsibilityChain.html</guid><category><![CDATA[java]]></category><dc:creator><![CDATA[房大牛]]></dc:creator><pubDate>Fri, 21 Apr 2023 22:44:27 GMT</pubDate></item><item><title><![CDATA[代理模式]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>代理模式是一种结构型设计模式，它允许通过创建一个代理对象来控制对另一个对象的访问。代理对象充当客户端和实际对象之间的中介，隐藏了实际对象的实现细节。</p>
</div>
]]></description><link>https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/12.Proxy.html</link><guid isPermaLink="true">https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/12.Proxy.html</guid><category><![CDATA[java]]></category><dc:creator><![CDATA[房大牛]]></dc:creator><pubDate>Fri, 21 Apr 2023 22:44:26 GMT</pubDate></item><item><title><![CDATA[享元模式]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>享元模式是一种结构型设计模式，它通过共享尽可能多的对象来减少内存使用和提高性能。该模式适用于需要创建大量相似对象的场景，通过共享这些对象的状态来减少对象的数量。</p>
</div>
]]></description><link>https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/11.Flyweight.html</link><guid isPermaLink="true">https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/11.Flyweight.html</guid><category><![CDATA[java]]></category><dc:creator><![CDATA[房大牛]]></dc:creator><pubDate>Fri, 21 Apr 2023 22:44:25 GMT</pubDate></item><item><title><![CDATA[过滤器模式]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>过滤器模式是一种结构型设计模式，它允许我们使用不同的过滤器来过滤一组对象，以便满足特定的条件。</p>
</div>
]]></description><link>https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/10.Filter.html</link><guid isPermaLink="true">https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/10.Filter.html</guid><category><![CDATA[java]]></category><dc:creator><![CDATA[房大牛]]></dc:creator><pubDate>Fri, 21 Apr 2023 22:44:24 GMT</pubDate></item><item><title><![CDATA[组合模式]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>组合模式是一种结构型设计模式，它允许将对象组合成树形结构以表现“部分-整体”的层次结构。组合模式使得客户端可以统一对待单个对象和对象组合，从而简化了客户端的代码。</p>
</div>
]]></description><link>https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/9.Combination.html</link><guid isPermaLink="true">https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/9.Combination.html</guid><category><![CDATA[java]]></category><dc:creator><![CDATA[房大牛]]></dc:creator><pubDate>Fri, 21 Apr 2023 22:44:23 GMT</pubDate></item><item><title><![CDATA[装饰器模式]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>装饰器模式是一种结构型设计模式，它允许在运行时动态地向对象添加功能，而不会影响到其他对象。</p>
</div>
]]></description><link>https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/8.Decorator.html</link><guid isPermaLink="true">https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/8.Decorator.html</guid><category><![CDATA[java]]></category><dc:creator><![CDATA[房大牛]]></dc:creator><pubDate>Fri, 21 Apr 2023 22:44:22 GMT</pubDate></item><item><title><![CDATA[外观模式]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>外观模式是一种结构型设计模式，它为复杂的子系统提供了一个简单的接口，以便于客户端使用。外观模式隐藏了子系统的复杂性，使得客户端只需要与外观对象交互即可完成任务。</p>
</div>
]]></description><link>https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.Facade.html</link><guid isPermaLink="true">https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.Facade.html</guid><category><![CDATA[java]]></category><dc:creator><![CDATA[房大牛]]></dc:creator><pubDate>Fri, 21 Apr 2023 22:44:21 GMT</pubDate></item><item><title><![CDATA[桥接模式]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>桥接模式是一种结构型设计模式，它将抽象部分和实现部分分离开来，使它们可以独立地变化。通过桥接模式，可以将一个类的实现细节与它的抽象部分分离开来，从而使它们可以独立地进行变化，而不会相互影响。</p>
</div>
]]></description><link>https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/6.Bridging.html</link><guid isPermaLink="true">https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/6.Bridging.html</guid><category><![CDATA[java]]></category><dc:creator><![CDATA[房大牛]]></dc:creator><pubDate>Fri, 21 Apr 2023 22:44:20 GMT</pubDate></item><item><title><![CDATA[适配器模式]]></title><description><![CDATA[<div class="custom-block danger"><p class="custom-block-title">说明</p>
<p>适配器模式是一种结构型设计模式，它允许将一个类的接口转换成客户端所期望的另一种接口，从而使得原本由于接口不兼容而无法工作的类能够一起工作。适配器模式分为类适配器和对象适配器两种实现方式。</p>
</div>
]]></description><link>https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/5.Adapter.html</link><guid isPermaLink="true">https://daniu.com/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/5.Adapter.html</guid><category><![CDATA[java]]></category><dc:creator><![CDATA[房大牛]]></dc:creator><pubDate>Fri, 21 Apr 2023 22:44:19 GMT</pubDate></item></channel></rss>